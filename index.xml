<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jamie Blog</title><link>http://example.org/</link><description>Recent content on Jamie Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Fri, 25 Mar 2022 12:00:00 +0000</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>[技術筆記]Vue中使用watch來監聽data變化</title><link>http://example.org/2022/03/255/vue_watch/</link><pubDate>Fri, 25 Mar 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/03/255/vue_watch/</guid><description>前言 目前我在手上的專案，要從 Vue2.6 轉換到 Vue3.0，剛好利用這個機會紀錄一下兩者的差別。
Vue2.x 的 watch 寫法 簡單寫法 假設欲觀察的值為 testData
data(){ return { testData:0 } }, watch:{ testData:(newValue, oldValue){ console.log(&amp;#34;data changed&amp;#34;) } } 完整寫法 假設欲觀察的值為 testData
data(){ return { testData:0 } }, watch:{ testData:{ immediate:true, //立即監聽（初次渲染時就執行） handler:(newValue, oldValue){ //監視的回調 console.log(newValue) } } } Vue3.0 的 watch 寫法 監視一個 ref 定義的響應式數據 假設欲觀察的值為 testData
setup(){ const testData = ref(0) watch(testData, (newValue, oldValue)=&amp;gt;{ console.log(&amp;#34;testData changed&amp;#34;, newValue) }) return {testData} } ps. immediate和deep的配置也可以使用；不過大多數情況 setup 中的 watch 都是 immediate 的</description></item><item><title>[人性大師]高中學歷的心理學大師埃里克森</title><link>http://example.org/2022/03/24/how_ericson_became_himself/</link><pubDate>Thu, 24 Mar 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/03/24/how_ericson_became_himself/</guid><description>前言 上次在陽老師講佛洛依德的講座中，我是第一次聽陽老師用人性系統論做分析，感受到一種陌生的簡潔美，同時感受到資訊量有點超出自己的負荷；而這次埃里克森的講座，陽老師一樣是用人性系統論來分析埃里克森的人格特質、成就與人生敘事等等，好像有點感覺了。
筆記 埃里克森的人性單元 人格特質 外向性：中低。喜歡自己獨處讀書；覺得派對無聊時會一個人默默推出。 神經質：很高。所以陷入同一性危機。 盡責性：低轉變到中高。原本女友懷孕時還不想和她結婚；之後才漸漸為家庭負責。 宜人性：較高。對朋友都友善，且不擅長和人爭執。 開放性：中高。喜愛藝術。 認知能力 感商：高。他可以借助電影和傳記為思考媒介，發展人生週期論 智商：中。只有高中學歷；有機會讀完大學但都沒有完成。 理商：中。 動機偏好 疏離動機 合群動機 順從動機 埃里克森的人生敘事 敘事基調：光明 意象原型：熱愛寫作的老師 故事主題：愛與關係 故事節奏：救贖 筆記 在埃里克森人生中的許多重大轉折中，幾乎都不是自己主導的，而是因為朋友、妻子等重要他人的影響或者建議而做出選擇，這部分反映出他的高宜人性和順從動機。但從世俗成功學來看，順從他人的話、不是自己披荊斬棘走出來的路，根本就是一個反面案例；然而埃里克森就是這樣發展出來影響深遠的理論。
所謂人格上的缺陷，從更宏觀的角度上來看，只不過是這個人的特點。應該要好好善用自己的特點，而不是依照市面上的成功學模板來削足適履。
另外，陽老師所提出的意象原型，在埃里克森人生敘事中讓人好觸動。人生初期，埃里克森帶著藝術家的夢想周遊歐洲；之後，來到佛洛依德女兒的機構裡，開始了兒童精神分析的職業生涯；到了美國之後，開始在大學任教。在這段求索的時期，藝術家、兒童精神分析師、教育家都是埃里克森想要成為的意象原型，但每個對他而言好像都缺了點什麼：藝術家時賺不到錢、對精神分析的工作沒那麼有興趣、在大學任教自己的學歷出身似乎得不到認同。
雖然解決危機的方式是出軌&amp;hellip;&amp;hellip;，但不可否認人生有多種可能性。多去尋找與探索，同時在認同危機中試問自己是怎麼樣的人，相信自己的缺點其實是最大的特點。
ChangeLog 20220324 初稿</description></item><item><title>[技術筆記]Vue中的Event Bus</title><link>http://example.org/2022/03/24/vue_event_bus/</link><pubDate>Thu, 24 Mar 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/03/24/vue_event_bus/</guid><description>從 Vue2.x 到 Vue3 中的 EventBus 前言 在 Vue2 中，如果要實現跨組件的通訊，除了 Vuex之外，在小型專案也很常使用 event bus；但是在 Vue3 中，移除了 $on、$off、$emit等語法，沒辦法讓 event bus 使用其 api 來監聽。不過，Vue3 中可以用第三方 library mitt
Vue2.x 中的 Event Bus 第一種方法：在 main.js 中建立 event bus 屬性 main.js 中：
//在Vue實例中新增一個屬性 Vue.prototype.$eventBus = new Vue(); 在要監聽事件的組件中：
this.$on(&amp;#34;event name&amp;#34;,(*args)=&amp;gt;{ ... }) 在要觸發事件的組件中：
this.$emit(&amp;#34;event name&amp;#34;,*args) 第二種方法：直接建立新的 Vue 實例，當作 EventBus 在eventBus.js中
import Vue from &amp;#34;vue&amp;#34;; export const EventBus = new Vue(); 在要監聽事件的組件中：
import { EventBus } from &amp;#34;@/eventBus&amp;#34;; EventBus.</description></item><item><title>[技術筆記]在Vue自製plugin！</title><link>http://example.org/2022/03/17/vue_make_plugin/</link><pubDate>Thu, 17 Mar 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/03/17/vue_make_plugin/</guid><description>Vue 中自製 plugin 在 Vue2.x 中自製 plugin 添加全局方法 (pluginDemo.js)
export default { install(Vue) { Vue.myGlobalMethod = function (...args) { //...todo } } } 新增自訂指令（v-my-directive） (pluginDemo.js)
export default { install(Vue) { Vue.directive(&amp;#39;my-directive&amp;#39;, { bind (el, binding, vnode, oldVnode) { //... todo } }); } } 新增 mixin (pluginDemo.js)
export default{ install(Vue){ Vue.misin({ created:function(){ //...todo }, methods:{ demoFunc(){ //...todo } } }) } } 啟用組件 (pluginDemo.js)
export default { install(Vue) { Vue.component(&amp;#39;my-component&amp;#39;, MyComponent); } } 於 Vue 原型添加屬性 (pluginDemo.</description></item><item><title>[人性大師]埃里克森的理論</title><link>http://example.org/2022/03/15/ericson_theory_into_movie/</link><pubDate>Tue, 15 Mar 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/03/15/ericson_theory_into_movie/</guid><description>使用埃里克森的心理社會八階段來分析《野草莓》 前言 《野草莓》是 1957 年的一部瑞士黑白電影。劇情主要是 79 歲的主角伊薩克在一天之中的現實與夢境。現實中，自己和媳婦要開車前往母校獲頒榮譽學位，而一路上的舊地重遊讓他不斷的回想到過去；而夢境中，他以年邁的肉體穿梭在以前的人事物中。
心理社會階段分析 信任與不信任 從電影內容中，主角時間線最早的時候，應該是在「夏日的小屋」和表妹關係產生變化的時候，看起來是青少年期。但電影中，伊薩克的父親似乎是不存在一樣，而母親是一個冷漠如冰的人，而伊薩克似乎就在這樣的家庭氛圍中，承襲了冷漠的特質。這個可能反映了在感官期中，伊薩克使用了不信任的應對方式來應對這世界。
親密與孤獨 在青年時期，伊薩克本來與表妹有婚約關係，但最後卻和自己的兄弟結婚了；而在自己的婚姻中，也目睹了妻子的出軌。他不知為何總是被孤獨的命運所纏繞。
同一性與角色混亂 故事中顯示，伊薩克是一個事業成功且受人尊敬的醫生。對他來說，醫生是他認為重要且做得最好的角色。但同時，也可能因為只醉心於醫生事業，忽略了做好「丈夫」、「父親」這兩個角色的工作，而後又只能從醫生這個角色得到反饋與成就感。不知道這算不算一種角色混亂？
老年期-自我完善或希望 在接受榮譽學位的旅途中，除了有關過去的夢境之外，現實中遇見了年輕的兩男一女、一對夫妻，冥冥之中對應著伊薩克青年時和愛慕的表妹的三角關係、和已故妻子不合的關係。雖然在故事的最後，看似伊薩克理解了自己的冷漠與自私是所有愛的缺失的源頭，也想要和兒子和解，結束這缺乏父愛的輪迴。但是否伊薩克完成了自我完善的階段？電影裡只揭示了夢中的陽光下，在海邊岩岸上朝著伊薩克揮手的父親。
ChangeLog 20220315-看完電影後輸出初稿</description></item><item><title>[技術筆記]Vue3中，Typescript和Webpack5的路徑命名問題</title><link>http://example.org/2022/03/13/vue_typescript_webpack5/</link><pubDate>Sun, 13 Mar 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/03/13/vue_typescript_webpack5/</guid><description>Typescript 和 Webpack5 的路徑命名問題 前言 因為在專案中，原本只有在 webpack 中使用路徑重命名，發現在 vscode 中還是沒辦法找到該路徑，最後發現是 typescript 的編譯問題，因此來紀錄一下
Typescript 定義路徑別名： tsconfig.json 設定 { &amp;#34;compilerOptions&amp;#34;: { &amp;#34;paths&amp;#34;: { &amp;#34;@base/*&amp;#34;: [&amp;#34;src/*&amp;#34;], &amp;#34;@plugins/*&amp;#34;: [&amp;#34;src/plugins/*&amp;#34;], &amp;#34;@themes/*&amp;#34;: [&amp;#34;src/themes/*&amp;#34;], ...... } } } webpack5 的別名 webpack.config.js 設定 module.exports = { ... resolve:{ extensions: [&amp;#39;.ts&amp;#39;, &amp;#39;.js&amp;#39;, &amp;#39;.json&amp;#39;, &amp;#39;.css&amp;#39;, &amp;#39;.scss&amp;#39;, &amp;#39;.vue&amp;#39;], alias: { &amp;#39;@base&amp;#39;: path.resolve(__dirname, &amp;#39;src&amp;#39;), &amp;#39;@plugins&amp;#39;: path.resolve(__dirname, &amp;#39;src/plugins&amp;#39;), &amp;#39;@themes&amp;#39;: path.resolve(__dirname, &amp;#39;src/themes&amp;#39;), ... } }, ... } PS，如果在 webpack5 中的專案有使用 JWT 的 library 會報一個polyfill的錯</description></item><item><title>[人性大師]《佛洛依德傳》二月輸出及回顧</title><link>http://example.org/2022/02/28/read_Freud_in_class/</link><pubDate>Mon, 28 Feb 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/02/28/read_Freud_in_class/</guid><description>輸出與回顧 前言 在這一個月的閱讀中，本來的策略是快速閱讀章節後再來寫下卡片筆記，但這個月的佛洛依德傳記閱讀其實沒有完全讀完，因此卡片的累積也沒有很多；反而是在陽老師的直播課當下和之後，受到的啟發反而比較多，因此也寫下較多的卡片。下個月的閱讀課程中，我想要改變這樣的行為慣性，起碼閱讀完後立刻寫下一張卡片！
回顧 綜觀佛洛依德的一生，像極了落魄一個貴族，為了名滿天下而不斷在世上尋找一戰成名機會，解剖學、可卡因&amp;hellip;&amp;hellip;但總是處處碰壁，最後在自己的意識深處拔出名為“精神分析”的劍，一劍把整個時代劈成前佛洛依德和後佛洛依德，住進裡自己的術語所堆砌出來的城堡、稱王。
如果事後歸因的話，佛洛依德除了「不斷輸出作品」、「靠近或拉攏自己欣賞的學者」之外，我最欣賞的是他對自己直覺的相信，沒有因為外界的批評而質疑自己的理論，反而是不斷地以作品說話，堅持自己的意念直到終了。
他沒有在害怕衝突、害怕引起輿論譁然，可能那時的他就已經知曉「沒有新聞就是壞新聞」的行銷手法，不斷地發表有爭議的理論來挑戰學界和大眾；又或者，他在建築精神分析大廈時，自己也被困在其中了？
Change Log 20220228 初稿</description></item><item><title>[技術筆記]Flutter 中的 StatlessWidget 和 StatefulWidget</title><link>http://example.org/2022/02/21/flutter_widget/</link><pubDate>Mon, 21 Feb 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/02/21/flutter_widget/</guid><description>StatelessWidget 和 StatefulWidget 前言 在 Flutter 開發中，可以說“一切皆 widget”，在前端框架中很常見的名詞如 View、View Controller、Activity、Application、Layout 等等，在 Flutter 中都是 widget。 而在 Flutter 中的 widget，有StatelessWidget 和 StatefulWidget 兩種類型；而兩者的差別，是在於：
StatefulWidget 是處理有交互、畫面視覺變化的場景； StatelessWidget 則是處理沒有變化的靜態場景； StatelessWidget 使用時機：如果渲染初期就可以獲得所需參數，那就可以直接用 StatelessWidget；換句話說，當 widget 建構出來後，不再關心也不再響應數據變化，那麼就用 StatelessWidget StatefulWidget 有狀態的 widget 透過 setState((){}) 來更新數據並觸發 build()，重新渲染 widget 生命週期（目前我專案中最常用到的就是 initState 和 dispose） initState: 在整個生命週期中只會被調用一次，可以用來初始化一些數據 didChangeDependencies：專門處理 State 依賴關係變化 build：return 一個 widget，為該畫面 UI didUpdateWidget(Widget oldWidget)：只要父 widget 調用setState，該函數就會被觸發 deactivate：當該 widget 的可見狀態發生變化時會調用，依照定義，是在dispose、也就是 widget 被銷毀之前調用。（不過目前筆者還沒有該使用場景，會再研究一下） dispose：當 widget 被永久地從 widget tree 中被移除時調用，通常會拿來“移除監聽” 有 StatefulWidget，為何還需要 StatelessWidget 雖然說使用 StatefulWidget 可以應付所有場景，但調用setState來更新視圖時，該 StatefulWidget 的所有子 widget 也會跟著 rebuild，這代表了巨大的資源消耗，會讓 Flutter 的渲染性能造成很大的影響。</description></item><item><title>[人性大師]佛洛依德的人生逆襲</title><link>http://example.org/2022/02/20/how_Freud_became_himself/</link><pubDate>Sun, 20 Feb 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/02/20/how_Freud_became_himself/</guid><description>佛洛依德的人生逆襲 人性系統論 在陽老師的直播中，看到陽老師使用人性系統論，絲絲入扣的分析佛洛依德的種種，不得不感嘆其理論簡潔之美。
人格特質 使用大五人格分析，極低的宜人性讓佛洛依德不斷地與朋友決裂，但同時也保有自己開啟“精神分析”的獨立性 認知能力 感商：高感商讓佛洛依德對人性的幽微之處敏感， 理商：低理商也讓他的理論成果飽受“科學與非科學”的爭議 動機偏好 偏向“競爭”和“疏離”，是個疏離的外向者 人生敘事 故事主題：一個愛與成就的故事。佛洛依德有著豐沛的感情，同時也焦慮自己的事業成就能否在世上有一席之地 敘事基調：黑暗。（？） 意象原型：就算外在環境是貧困或是戰亂，佛洛依德始終保持菁英的姿態。可能與青年時的導師布呂克的影響有關 故事節奏：自強。佛洛依德靠自己的不斷輸出作品而聞名於世。 人生資本論 根據陽老師的“人生資本”框架，佛洛依德的人生初期，許多資本都是相對低的：家境清寒、沒有顯赫的人脈關係，唯一還不錯的是佛洛依德很會讀書，而家庭也很支持佛洛依德的讀書之路，因此可以在文化資本中不斷累積；同時，因為努力研究而得到研究導師的敬意，研究導師在許多方面都幫了佛洛依德不少，因此其政治資本也幫助了前期的佛洛依德。不過這些都還沒有反映在佛洛依德的經濟資本中，在他的而立之年，和妻子都是過著有點困窘的生活。
如果是一般人，可能就會向生活低頭；但佛洛依德之所以為佛洛依德，一部分也是因為他強大的自信心，他始終堅信自己的不平凡，一定會在歷史留名。這強大的心理資本和現實之間的差距，使他在焦慮中依然不斷地思考、輸出作品、思考、輸出作品，總算讓他在四十歲之後迎來了人生的高潮。
Change Log 20220220 初稿</description></item><item><title>[技術筆記]Flutter 多版本管理</title><link>http://example.org/2022/02/12/flutter_version_managing/</link><pubDate>Sat, 12 Feb 2022 12:00:00 +0000</pubDate><guid>http://example.org/2022/02/12/flutter_version_managing/</guid><description>Flutter 多版本管理 前言 如果是自己開發的話，那就只要選擇一個 Flutter 版本然後依照該版本的規則進行開發就好。
但如果是進入一家公司，而公司內部又有不同版本的 Flutter 專案需要維護或開發，那麼就需要多版本的來回切換了。 （也是我前幾個月前遇到的問題，所以自己來紀錄一下。）
直接改 Folder 名稱 其實最簡潔的方式，就是到官網把需要的 Flutter 版本下載下來（假設現在下載了2.10.2和2.8.1的版本），先解壓縮、把解壓縮 Folder 名稱改為flutter_版本（這部分隨意，方便記憶就好），然後放在你想放的路徑下。（ex:“/Users/User/Library/Flutter_sdk/”）
然後修改 .zshrc 或者 .bash_profile來添加命令行路徑： export PATH=&amp;quot;$PATH:/Users/User/Library/Flutter_sdk/flutter/bin&amp;quot;
接下來只要把要使用的 Flutter 版本，把該 folder 名稱改為flutter就好了（假設是要用 2.8.1，就把flutter_2_8改為flutter）：
可以在 terminal 輸入flutter --version來看看是否成功。 FVM 管理 FVM 是第三方的 Flutter 版本管理工具，類似 node.js 的 NVM，可以很方便的切換不同版本的 Flutter。
可以根據 fvm 開源社群官網上的步驟來執行：
brew tap leoafarias/fvm
brew install fvm
之後就可以使用 FVM 的命令來下載和調用 Flutter
下載特定的 flutter 版本： fvm install {version}
使用特定的 flutter 版本： fvm use {verison}</description></item></channel></rss>