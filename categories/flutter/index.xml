<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flutter on Jamie Blog</title><link>https://lidingyu0510.github.io/categories/flutter/</link><description>Recent content in Flutter on Jamie Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Mon, 21 Feb 2022 12:00:00 +0000</lastBuildDate><atom:link href="https://lidingyu0510.github.io/categories/flutter/index.xml" rel="self" type="application/rss+xml"/><item><title>[技術筆記]Flutter 中的 StatlessWidget 和 StatefulWidget</title><link>https://lidingyu0510.github.io/2022/02/21/flutter_widget/</link><pubDate>Mon, 21 Feb 2022 12:00:00 +0000</pubDate><guid>https://lidingyu0510.github.io/2022/02/21/flutter_widget/</guid><description>StatelessWidget 和 StatefulWidget 前言 在 Flutter 開發中，可以說“一切皆 widget”，在前端框架中很常見的名詞如 View、View Controller、Activity、Application、Layout 等等，在 Flutter 中都是 widget。 而在 Flutter 中的 widget，有StatelessWidget 和 StatefulWidget 兩種類型；而兩者的差別，是在於：
StatefulWidget 是處理有交互、畫面視覺變化的場景； StatelessWidget 則是處理沒有變化的靜態場景； StatelessWidget 使用時機：如果渲染初期就可以獲得所需參數，那就可以直接用 StatelessWidget；換句話說，當 widget 建構出來後，不再關心也不再響應數據變化，那麼就用 StatelessWidget StatefulWidget 有狀態的 widget 透過 setState((){}) 來更新數據並觸發 build()，重新渲染 widget 生命週期（目前我專案中最常用到的就是 initState 和 dispose） initState: 在整個生命週期中只會被調用一次，可以用來初始化一些數據 didChangeDependencies：專門處理 State 依賴關係變化 build：return 一個 widget，為該畫面 UI didUpdateWidget(Widget oldWidget)：只要父 widget 調用setState，該函數就會被觸發 deactivate：當該 widget 的可見狀態發生變化時會調用，依照定義，是在dispose、也就是 widget 被銷毀之前調用。（不過目前筆者還沒有該使用場景，會再研究一下） dispose：當 widget 被永久地從 widget tree 中被移除時調用，通常會拿來“移除監聽” 有 StatefulWidget，為何還需要 StatelessWidget 雖然說使用 StatefulWidget 可以應付所有場景，但調用setState來更新視圖時，該 StatefulWidget 的所有子 widget 也會跟著 rebuild，這代表了巨大的資源消耗，會讓 Flutter 的渲染性能造成很大的影響。</description></item><item><title>[技術筆記]Flutter 多版本管理</title><link>https://lidingyu0510.github.io/2022/02/12/flutter_version_managing/</link><pubDate>Sat, 12 Feb 2022 12:00:00 +0000</pubDate><guid>https://lidingyu0510.github.io/2022/02/12/flutter_version_managing/</guid><description>Flutter 多版本管理 前言 如果是自己開發的話，那就只要選擇一個 Flutter 版本然後依照該版本的規則進行開發就好。
但如果是進入一家公司，而公司內部又有不同版本的 Flutter 專案需要維護或開發，那麼就需要多版本的來回切換了。 （也是我前幾個月前遇到的問題，所以自己來紀錄一下。）
直接改 Folder 名稱 其實最簡潔的方式，就是到官網把需要的 Flutter 版本下載下來（假設現在下載了2.10.2和2.8.1的版本），先解壓縮、把解壓縮 Folder 名稱改為flutter_版本（這部分隨意，方便記憶就好），然後放在你想放的路徑下。（ex:“/Users/User/Library/Flutter_sdk/”）
然後修改 .zshrc 或者 .bash_profile來添加命令行路徑： export PATH=&amp;quot;$PATH:/Users/User/Library/Flutter_sdk/flutter/bin&amp;quot;
接下來只要把要使用的 Flutter 版本，把該 folder 名稱改為flutter就好了（假設是要用 2.8.1，就把flutter_2_8改為flutter）：
可以在 terminal 輸入flutter --version來看看是否成功。 FVM 管理 FVM 是第三方的 Flutter 版本管理工具，類似 node.js 的 NVM，可以很方便的切換不同版本的 Flutter。
可以根據 fvm 開源社群官網上的步驟來執行：
brew tap leoafarias/fvm
brew install fvm
之後就可以使用 FVM 的命令來下載和調用 Flutter
下載特定的 flutter 版本： fvm install {version}
使用特定的 flutter 版本： fvm use {verison}</description></item></channel></rss>